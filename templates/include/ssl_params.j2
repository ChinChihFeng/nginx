ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-RC4-SHA:ECDHE-RSA-AES256-GCM-SHA384:AES128-GCM-SHA256:HIGH:!RC4:!MD5:!aNULL:!EDH:!CAMELLIA;
ssl_dhparam {{ nginx_ssl_path }}/dhparam2048.pem;
ssl_prefer_server_ciphers   on;
ssl_session_cache shared:SSL:32m;
ssl_session_timeout 10m;
ssl_stapling on;
ssl_stapling_verify on;
#resolver 8.8.4.4 8.8.8.8 valid=300s;
#resolver_timeout 10s;

ssl_buffer_size 8k;  # balanced
#ssl_buffer_size 16k; # for throughput, video applications
#ssl_buffer_size 4k;   # for quick first byte delivery

# $> openssl rand 48 > file.key
ssl_session_tickets on; 
ssl_session_ticket_key  {{ nginx_ssl_path }}/tickets.key;

#add_header Alternate-Protocol "443:npn-spdy/3.1";
#add_header Public-Key-Pins "pin-sha256=\"zSqNp4WNofkvdKo7bNcWLhMMIuFWmEAytXYGTF6tk9s=\"; max-age=15768000";
#add_header Strict-Transport-Security "max-age=31536000; includeSubdomains"; 


### Documentation

# SSL certificate chains
# cat www.ctb288.net.crt gd_bundle-g2-g1.crt > www.ctb288.net.chained.crt
#ssl_certificate     {{ nginx_ssl_path }}/www.ctb288.net.chained.crt;
#ssl_certificate_key {{ nginx_ssl_path }}/www.ctb288.net.key;

# for [ssl_trusted_certificate]
# a Positive SSL certificate so AddTrustExternalCARoot.crt is the root certificate and PositiveSSLCA2.crt is the intermediate.
# Replace with your issuer’s certificates accordingly. If you don’t have your CA’s root certificate, it should be available from their web site.
# Order is important
# $ cat AddTrustExternalCARoot.crt PositiveSSLCA2.crt > trustchain.crt

# Use 2048 bit Diffie-Hellman RSA key parameters
# (otherwise Nginx defaults to 1024 bit, lowering the strength of encryption # when using PFS)
# Generated by OpenSSL with the following command:
# openssl dhparam -outform pem -out {{ nginx_ssl_path }}/dhparam2048.pem 2048


# for SSL
# Generate the server’s private key:
# $ openssl genrsa -out /etc/ssl/private/example.com.key 2048
#
# Generate the Certificate Signing Request (CSR):
# $ openssl req -new -key /etc/ssl/private/example.com.key -out /etc/ssl/private/example.com.csr
#
# FQDN: “www.example.com”
#
# chmod 0400 /etc/ssl/private/example.com.*
#
# Save certificate from the CA
# /etc/ssl/certs/example.com.crt
#
# Get and store intermediate certificate from CA to /etc/ssl/certs/
# e.g.
# COMODORSAAddTrustCA.crt
# COMODORSADomainValidationSecureServerCA.crt

