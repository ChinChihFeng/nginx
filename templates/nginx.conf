
worker_processes        {{ ansible_processor_cores }};	# one(1) worker or equal the number of _real_ cpu cores. "grep processor /proc/cpuinfo | wc -l"
worker_priority		 -10;
worker_rlimit_nofile  260000;

worker_cpu_affinity  # no of rows dependent on number of cores
  00000000000000000000000000000001
#  00000000000000000000000000000010
#  00000000000000000000000000000100
#  00000000000000000000000000001000
#  00000000000000000000000000010000
#  00000000000000000000000000100000
#  00000000000000000000000001000000
#  00000000000000000000000010000000
#  00000000000000000000000100000000
#  00000000000000000000001000000000
#  00000000000000000000010000000000
#  00000000000000000000100000000000
#  00000000000000000001000000000000
#  00000000000000000010000000000000
#  00000000000000000100000000000000
#  00000000000000001000000000000000
#  00000000000000010000000000000000
#  00000000000000100000000000000000
#  00000000000001000000000000000000
#  00000000000010000000000000000000
#  00000000000100000000000000000000
#  00000000001000000000000000000000
#  00000000010000000000000000000000
#  00000000100000000000000000000000
#  00000001000000000000000000000000
#  00000010000000000000000000000000
#  00000100000000000000000000000000
#  00001000000000000000000000000000
#  00010000000000000000000000000000
#  00100000000000000000000000000000
#  01000000000000000000000000000000
#  10000000000000000000000000000000
  ;

timer_resolution 100ms;
pcre_jit on;


events {
    #use kqueue;                # enable for FreeBSD, OSX
    use epoll;		        # Linux 2.6+, use epoll to ensure we can handle a large number of connections optimally
    worker_connections  131768;	# number of parallel or concurrent connections per worker_processes *2 for reverse proxy. 1 in, 1 out
    multi_accept            on;   # "on" if nginx worker_processes > 1
    accept_mutex           off;
}


http {
    lua_package_path '{{ nginx_path }}/lua/lib/?.lua;;';
    lua_package_cpath '{{ nginx_path }}/lua/lib/?.so;;';
    init_by_lua_block {
        local lua_resty_waf = require "waf"
        lua_resty_waf.init()
    }

    include conf.d/include/http_params;
    include conf.d/include/ssl_params;
    include conf.d/include/proxy_params;

    ## Log Format

    log_format  main  '$remote_addr - $remote_user $http_host '
		      '[$time_local] $request_time $request_length $request '
               	      '"$status" $body_bytes_sent "$http_referer" '
	              '"$http_user_agent" "$http_x_forwarded_for" "$gzip_ratio" '
        	      '"$connection" "$connection_requests" '
		      '$upstream_addr [$upstream_response_time] '
		      '$upstream_cache_status '
                     #'$upstream_cache_status $upstream_http_cache_control $upstream_http_expires '
		     #'[$srcache_fetch_status] [$srcache_store_status] [$srcache_expire] '
		     #'$args '
		;

    access_log off;	
    error_log off;
    open_log_file_cache max=1000 inactive=60s;


    log_format full
    '$remote_addr $remote_user [$time_local] '
    '"$host"->$proxy_host->$upstream_addr '
    '"$request" $status($upstream_status) '
    '$bytes_sent/$gzip_ratio($sent_http_content_type) '
    '$request_time($upstream_response_time)';

    log_format perf
    '$request_time($upstream_response_time) '
    '$bytes_sent/$gzip_ratio($sent_http_content_type) '
    '$status "$upstream_addr$uri"';

    log_format gzip
    '$bytes_sent/$gzip_ratio($sent_http_content_type) '
    '[$http_accept_encoding]"$http_user_agent"';

    #access_log /var/log/nginx/access-full.log full;
    #access_log /var/log/nginx/access-perf.log perf;
    #access_log /var/log/nginx/access-gzip.log gzip;

    proxy_cache_path {{ nginx_cache_path }}/nginx/webcache levels=1:2 keys_zone=webcache:100m inactive=15m max_size=300m;
    proxy_cache_path {{ nginx_cache_path }}/nginx/microcache levels=1:2 keys_zone=microcache:50m max_size=100m;
    proxy_temp_path {{ nginx_cache_path }}/nginx/proxy_tmp;


    ## Limit requests per second to 300 requests per second. If the
    ## user's ip address goes over the limit they will be sent an
    ## error for every subsequent request.
    #limit_conn_zone $binary_remote_addr  zone=conn_limit_per_ip:50m;
    #limit_req_zone  $binary_remote_addr  zone=req_limit_per_ip:50m rate=300r/s;
    #limit_req_status  444;
    #limit_conn_status 503;


    ## customized stats module
    #  graphite-nginx-module:mailru - no longer writes to socket. Ignore server ip.
    #  stats output -> {{ nginx_cache_path }}/nginx/statsfile
    vhost_traffic_status_zone;

    server {
        server_name _;
        return 444;
    }
	
    include sites-enabled/*;

}



